var search_data = {"index":{"searchIndex":["actsasstory","classmethods","instancemethods","applicationcontroller","applicationhelper","city","comment","commentscontroller","editrequest","editrequestscontroller","editrequestshelper","enumerable","list","listitem","listitemscontroller","listscontroller","listshelper","object","oneoffs","passwordresetscontroller","passwordresetshelper","relationship","relationshipscontroller","restaurant","restaurantscontroller","sessionscontroller","sessionshelper","staticpagescontroller","staticpageshelper","story","subcity","synccontroller","synchelper","user","usermailer","userscontroller","usershelper","yelp","about()","accept()","accept!()","acceptable_fb_place?()","active_unless_current_user()","acts_as_story()","add_boston_sub_cities()","add_sf_sub_cities()","add_to()","add_to_list()","admin?()","avatar_tag()","avatar_url()","city_state_zip()","clean_up()","contribute()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_from_div()","create_from_facebook()","create_with_omniauth()","current_user()","current_user=()","current_user?()","destroy()","destroy()","destroy()","destroy()","destroy()","diff()","edit()","edit()","edit()","facebook()","fb_center()","fb_friends()","fb_post()","fb_search_token()","fb_share_caption()","fb_share_link()","fb_share_title()","fetch()","fix_phone_number()","follow!()","followers()","following()","following?()","full_name()","full_title()","get_recommendations()","get_sync()","gmaps4rails_address()","gmaps4rails_infowindow()","has_diff?()","home()","in()","included()","index()","index()","invite_by_email()","invite_user()","item()","link_to_phone()","list_for()","list_item_for()","mail_followed_user()","mean()","name_downcased()","name_with_state()","new()","new()","new()","new()","new()","parse()","parsed_params()","password_reset()","redirect_back_or()","reject()","reject!()","search()","search()","search()","search_by_prefix()","search_by_yelp()","search_rest()","select_options()","send_invite_to_new_user()","send_password_reset()","show()","show()","show()","show()","show()","sign_in()","sign_out()","signed_in?()","signed_in_user()","sort_by_frequency()","standard_deviation()","status()","store_location()","sub_cities_names()","syncable_users()","team()","to_s()","to_s()","unfollow!()","update()","update()","variance()","welcome_email()","readme_for_app"],"longSearchIndex":["actsasstory","actsasstory::classmethods","actsasstory::instancemethods","applicationcontroller","applicationhelper","city","comment","commentscontroller","editrequest","editrequestscontroller","editrequestshelper","enumerable","list","listitem","listitemscontroller","listscontroller","listshelper","object","oneoffs","passwordresetscontroller","passwordresetshelper","relationship","relationshipscontroller","restaurant","restaurantscontroller","sessionscontroller","sessionshelper","staticpagescontroller","staticpageshelper","story","subcity","synccontroller","synchelper","user","usermailer","userscontroller","usershelper","yelp","staticpagescontroller#about()","editrequestscontroller#accept()","editrequest#accept!()","city#acceptable_fb_place?()","usershelper#active_unless_current_user()","actsasstory::classmethods#acts_as_story()","oneoffs::add_boston_sub_cities()","oneoffs::add_sf_sub_cities()","listscontroller#add_to()","restaurantscontroller#add_to_list()","user#admin?()","usershelper#avatar_tag()","user#avatar_url()","restaurant#city_state_zip()","yelp::clean_up()","staticpagescontroller#contribute()","commentscontroller#create()","editrequestscontroller#create()","listitemscontroller#create()","listscontroller#create()","passwordresetscontroller#create()","relationshipscontroller#create()","restaurantscontroller#create()","sessionscontroller#create()","userscontroller#create()","object#create_from_div()","restaurant::create_from_facebook()","user::create_with_omniauth()","sessionshelper#current_user()","sessionshelper#current_user=()","sessionshelper#current_user?()","commentscontroller#destroy()","listitemscontroller#destroy()","listscontroller#destroy()","relationshipscontroller#destroy()","sessionscontroller#destroy()","editrequest#diff()","passwordresetscontroller#edit()","restaurantscontroller#edit()","userscontroller#edit()","sessionscontroller#facebook()","city#fb_center()","userscontroller#fb_friends()","user#fb_post()","user#fb_search_token()","list#fb_share_caption()","listshelper#fb_share_link()","list#fb_share_title()","yelp::fetch()","restaurant#fix_phone_number()","user#follow!()","userscontroller#followers()","userscontroller#following()","user#following?()","user#full_name()","applicationhelper#full_title()","synchelper#get_recommendations()","synccontroller#get_sync()","restaurant#gmaps4rails_address()","restaurant#gmaps4rails_infowindow()","editrequest#has_diff?()","staticpagescontroller#home()","restaurant::in()","actsasstory::included()","editrequestscontroller#index()","userscontroller#index()","userscontroller#invite_by_email()","usermailer#invite_user()","story#item()","applicationhelper#link_to_phone()","user#list_for()","list#list_item_for()","usermailer#mail_followed_user()","enumerable#mean()","subcity#name_downcased()","city#name_with_state()","listscontroller#new()","passwordresetscontroller#new()","restaurantscontroller#new()","sessionscontroller#new()","userscontroller#new()","yelp::parse()","editrequest#parsed_params()","usermailer#password_reset()","sessionshelper#redirect_back_or()","editrequestscontroller#reject()","editrequest#reject!()","restaurant::search()","restaurantscontroller#search()","user::search()","restaurant::search_by_prefix()","restaurant::search_by_yelp()","restaurant::search_rest()","city::select_options()","user#send_invite_to_new_user()","user#send_password_reset()","editrequestscontroller#show()","listscontroller#show()","restaurantscontroller#show()","synccontroller#show()","userscontroller#show()","sessionshelper#sign_in()","sessionshelper#sign_out()","sessionshelper#signed_in?()","sessionshelper#signed_in_user()","enumerable#sort_by_frequency()","enumerable#standard_deviation()","editrequest#status()","sessionshelper#store_location()","city#sub_cities_names()","userscontroller#syncable_users()","staticpagescontroller#team()","restaurant#to_s()","user#to_s()","user#unfollow!()","passwordresetscontroller#update()","userscontroller#update()","enumerable#variance()","usermailer#welcome_email()",""],"info":[["ActsAsStory","","ActsAsStory.html","",""],["ActsAsStory::ClassMethods","","ActsAsStory/ClassMethods.html","",""],["ActsAsStory::InstanceMethods","","ActsAsStory/InstanceMethods.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["City","","City.html","","<p>Schema Information\n<p>Table name: cities\n\n<pre>id           :integer         not null, primary key\nname         ...</pre>\n"],["Comment","","Comment.html","","<p>Schema Information\n<p>Table name: comments\n\n<pre>id            :integer         not null, primary key\nuser_id   ...</pre>\n"],["CommentsController","","CommentsController.html","",""],["EditRequest","","EditRequest.html","",""],["EditRequestsController","","EditRequestsController.html","",""],["EditRequestsHelper","","EditRequestsHelper.html","",""],["Enumerable","","Enumerable.html","",""],["List","","List.html","","<p>Schema Information\n<p>Table name: lists\n\n<pre>id         :integer         not null, primary key\nuser_id    :integer ...</pre>\n"],["ListItem","","ListItem.html","","<p>Schema Information\n<p>Table name: list_items\n\n<pre>id            :integer         not null, primary key\nlist_id ...</pre>\n"],["ListItemsController","","ListItemsController.html","",""],["ListsController","","ListsController.html","",""],["ListsHelper","","ListsHelper.html","",""],["Object","","Object.html","",""],["OneOffs","","OneOffs.html","",""],["PasswordResetsController","","PasswordResetsController.html","",""],["PasswordResetsHelper","","PasswordResetsHelper.html","",""],["Relationship","","Relationship.html","","<p>Schema Information\n<p>Table name: relationships\n\n<pre>id          :integer         not null, primary key\nfollower_id ...</pre>\n"],["RelationshipsController","","RelationshipsController.html","",""],["Restaurant","","Restaurant.html","","<p>Schema Information\n<p>Table name: restaurants\n\n<pre>id           :integer         not null, primary key\nname    ...</pre>\n"],["RestaurantsController","","RestaurantsController.html","",""],["SessionsController","","SessionsController.html","",""],["SessionsHelper","","SessionsHelper.html","",""],["StaticPagesController","","StaticPagesController.html","",""],["StaticPagesHelper","","StaticPagesHelper.html","",""],["Story","","Story.html","","<p>Schema Information\n<p>Table name: stories\n\n<pre>id            :integer         not null, primary key\nuser_id    ...</pre>\n"],["SubCity","","SubCity.html","","<p>Schema Information\n<p>Table name: sub_cities\n\n<pre>name    :string(255)\ncity_id :integer</pre>\n"],["SyncController","","SyncController.html","",""],["SyncHelper","","SyncHelper.html","",""],["User","","User.html","","<p>Schema Information\n<p>Table name: users\n\n<pre>id                     :integer         not null, primary key\nfirst_name ...</pre>\n"],["UserMailer","","UserMailer.html","",""],["UsersController","","UsersController.html","",""],["UsersHelper","","UsersHelper.html","",""],["Yelp","","Yelp.html","",""],["about","StaticPagesController","StaticPagesController.html#method-i-about","()",""],["accept","EditRequestsController","EditRequestsController.html#method-i-accept","()",""],["accept!","EditRequest","EditRequest.html#method-i-accept-21","()",""],["acceptable_fb_place?","City","City.html#method-i-acceptable_fb_place-3F","(fb_place)",""],["active_unless_current_user","UsersHelper","UsersHelper.html#method-i-active_unless_current_user","()",""],["acts_as_story","ActsAsStory::ClassMethods","ActsAsStory/ClassMethods.html#method-i-acts_as_story","(options = {})",""],["add_boston_sub_cities","OneOffs","OneOffs.html#method-c-add_boston_sub_cities","()",""],["add_sf_sub_cities","OneOffs","OneOffs.html#method-c-add_sf_sub_cities","()","<p>OneOffs.add_sub_cities\n"],["add_to","ListsController","ListsController.html#method-i-add_to","()","<p>handle the post from list\n"],["add_to_list","RestaurantsController","RestaurantsController.html#method-i-add_to_list","()","<p>handle post directly from restaurant to add to list\n"],["admin?","User","User.html#method-i-admin-3F","()",""],["avatar_tag","UsersHelper","UsersHelper.html#method-i-avatar_tag","(user, options = {})",""],["avatar_url","User","User.html#method-i-avatar_url","(size = 50)",""],["city_state_zip","Restaurant","Restaurant.html#method-i-city_state_zip","()",""],["clean_up","Yelp","Yelp.html#method-c-clean_up","(url)",""],["contribute","StaticPagesController","StaticPagesController.html#method-i-contribute","()","<p>static page for contributing\n"],["create","CommentsController","CommentsController.html#method-i-create","()",""],["create","EditRequestsController","EditRequestsController.html#method-i-create","()",""],["create","ListItemsController","ListItemsController.html#method-i-create","()",""],["create","ListsController","ListsController.html#method-i-create","()","<p>POST request for creating a new List\n"],["create","PasswordResetsController","PasswordResetsController.html#method-i-create","()","<p>check to make sure that the user is valid before sending mail\n"],["create","RelationshipsController","RelationshipsController.html#method-i-create","()",""],["create","RestaurantsController","RestaurantsController.html#method-i-create","()","<p>POST action for creating a new restaurant\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>POST the information that will create the new session and drop teh cookie\n"],["create","UsersController","UsersController.html#method-i-create","()",""],["create_from_div","Object","Object.html#method-i-create_from_div","()",""],["create_from_facebook","Restaurant","Restaurant.html#method-c-create_from_facebook","(fb_id, city_id)",""],["create_with_omniauth","User","User.html#method-c-create_with_omniauth","(auth)",""],["current_user","SessionsHelper","SessionsHelper.html#method-i-current_user","()","<p>getter method that doesn’t sign user out\n"],["current_user=","SessionsHelper","SessionsHelper.html#method-i-current_user-3D","(user)","<p>need a setter method for current_user defined in sign_in - reason is the\ncurrent user can change and …\n"],["current_user?","SessionsHelper","SessionsHelper.html#method-i-current_user-3F","(user)",""],["destroy","CommentsController","CommentsController.html#method-i-destroy","()",""],["destroy","ListItemsController","ListItemsController.html#method-i-destroy","()",""],["destroy","ListsController","ListsController.html#method-i-destroy","()","<p>DELETE request for killing a list =&gt; located on the user/:id page for\nshowing a user\n"],["destroy","RelationshipsController","RelationshipsController.html#method-i-destroy","()",""],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>DELETE the cookie and kill the session\n"],["diff","EditRequest","EditRequest.html#method-i-diff","(key, val)",""],["edit","PasswordResetsController","PasswordResetsController.html#method-i-edit","()",""],["edit","RestaurantsController","RestaurantsController.html#method-i-edit","()",""],["edit","UsersController","UsersController.html#method-i-edit","()",""],["facebook","SessionsController","SessionsController.html#method-i-facebook","()",""],["fb_center","City","City.html#method-i-fb_center","()",""],["fb_friends","UsersController","UsersController.html#method-i-fb_friends","()",""],["fb_post","User","User.html#method-i-fb_post","(message)",""],["fb_search_token","User","User.html#method-i-fb_search_token","()","<p>THIS IS A HACK RIGHT NOW - NEED TO FIX THIS LATER. CURRENTLY USING FARM’S\nACCESS TOKEN TO GET FB STUFF …\n"],["fb_share_caption","List","List.html#method-i-fb_share_caption","()",""],["fb_share_link","ListsHelper","ListsHelper.html#method-i-fb_share_link","()",""],["fb_share_title","List","List.html#method-i-fb_share_title","()",""],["fetch","Yelp","Yelp.html#method-c-fetch","(url)",""],["fix_phone_number","Restaurant","Restaurant.html#method-i-fix_phone_number","()","<p>get rid of all non digits then validate\n"],["follow!","User","User.html#method-i-follow-21","(other_user)","<p>create a relationship between this user’s followedid and the other user’s\nid\n"],["followers","UsersController","UsersController.html#method-i-followers","()","<p>return all followers\n"],["following","UsersController","UsersController.html#method-i-following","()","<p>return all followeds\n"],["following?","User","User.html#method-i-following-3F","(other_user)",""],["full_name","User","User.html#method-i-full_name","()",""],["full_title","ApplicationHelper","ApplicationHelper.html#method-i-full_title","(page_title)","<p>returns the full title on a per page basis\n"],["get_recommendations","SyncHelper","SyncHelper.html#method-i-get_recommendations","(users, current_city)","<p>create a recommendations engine here - right now just returns all of the\nusers that were inputted and …\n"],["get_sync","SyncController","SyncController.html#method-i-get_sync","()","<p>get recommendations for the useres that are returned from the input\n"],["gmaps4rails_address","Restaurant","Restaurant.html#method-i-gmaps4rails_address","()","<p>pass in the location so that can set model lat/lng data\n"],["gmaps4rails_infowindow","Restaurant","Restaurant.html#method-i-gmaps4rails_infowindow","()",""],["has_diff?","EditRequest","EditRequest.html#method-i-has_diff-3F","()",""],["home","StaticPagesController","StaticPagesController.html#method-i-home","()",""],["in","Restaurant","Restaurant.html#method-c-in","(city_id)",""],["included","ActsAsStory","ActsAsStory.html#method-c-included","(base)",""],["index","EditRequestsController","EditRequestsController.html#method-i-index","()",""],["index","UsersController","UsersController.html#method-i-index","()",""],["invite_by_email","UsersController","UsersController.html#method-i-invite_by_email","()","<p>POST method to invite by email\n"],["invite_user","UserMailer","UserMailer.html#method-i-invite_user","(user, new_user_email)",""],["item","Story","Story.html#method-i-item","()",""],["link_to_phone","ApplicationHelper","ApplicationHelper.html#method-i-link_to_phone","(number_str)",""],["list_for","User","User.html#method-i-list_for","(restaurant)",""],["list_item_for","List","List.html#method-i-list_item_for","(restaurant)",""],["mail_followed_user","UserMailer","UserMailer.html#method-i-mail_followed_user","(user, other_user)","<p>mail followed user\n"],["mean","Enumerable","Enumerable.html#method-i-mean","()",""],["name_downcased","SubCity","SubCity.html#method-i-name_downcased","()",""],["name_with_state","City","City.html#method-i-name_with_state","()",""],["new","ListsController","ListsController.html#method-i-new","()","<p>GET request for displaying how to create a new List\n"],["new","PasswordResetsController","PasswordResetsController.html#method-i-new","()",""],["new","RestaurantsController","RestaurantsController.html#method-i-new","()","<p>GET page for creating a new restaurant\n"],["new","SessionsController","SessionsController.html#method-i-new","()","<p>GET the page that will create a new session\n"],["new","UsersController","UsersController.html#method-i-new","()",""],["parse","Yelp","Yelp.html#method-c-parse","(url)",""],["parsed_params","EditRequest","EditRequest.html#method-i-parsed_params","()",""],["password_reset","UserMailer","UserMailer.html#method-i-password_reset","(user)","<p>send the user a password reset email\n"],["redirect_back_or","SessionsHelper","SessionsHelper.html#method-i-redirect_back_or","(default)",""],["reject","EditRequestsController","EditRequestsController.html#method-i-reject","()",""],["reject!","EditRequest","EditRequest.html#method-i-reject-21","()",""],["search","Restaurant","Restaurant.html#method-c-search","(query)",""],["search","RestaurantsController","RestaurantsController.html#method-i-search","()","<p>loopj hits this controller automatically and tacks on a param “q” TO DO:\nneed to add ability …\n"],["search","User","User.html#method-c-search","(query)","<p>create a static method search on a query\n"],["search_by_prefix","Restaurant","Restaurant.html#method-c-search_by_prefix","(query)",""],["search_by_yelp","Restaurant","Restaurant.html#method-c-search_by_yelp","(query)",""],["search_rest","Restaurant","Restaurant.html#method-c-search_rest","(query)",""],["select_options","City","City.html#method-c-select_options","()",""],["send_invite_to_new_user","User","User.html#method-i-send_invite_to_new_user","(new_user_email)","<p>send an invite to a new user email address\n"],["send_password_reset","User","User.html#method-i-send_password_reset","()","<p>send the password reset after generating and storing a new token\n"],["show","EditRequestsController","EditRequestsController.html#method-i-show","()",""],["show","ListsController","ListsController.html#method-i-show","()","<p>GET request to show lists/:id\n"],["show","RestaurantsController","RestaurantsController.html#method-i-show","()","<p>need to show the restaurant details and comments\n"],["show","SyncController","SyncController.html#method-i-show","()",""],["show","UsersController","UsersController.html#method-i-show","()",""],["sign_in","SessionsHelper","SessionsHelper.html#method-i-sign_in","(user)","<p>sign the user in by placing a cookie with the remember token for that\nperson generated by user model …\n"],["sign_out","SessionsHelper","SessionsHelper.html#method-i-sign_out","()","<p>sign the user out\n"],["signed_in?","SessionsHelper","SessionsHelper.html#method-i-signed_in-3F","()",""],["signed_in_user","SessionsHelper","SessionsHelper.html#method-i-signed_in_user","()",""],["sort_by_frequency","Enumerable","Enumerable.html#method-i-sort_by_frequency","()",""],["standard_deviation","Enumerable","Enumerable.html#method-i-standard_deviation","()",""],["status","EditRequest","EditRequest.html#method-i-status","()",""],["store_location","SessionsHelper","SessionsHelper.html#method-i-store_location","()","<p>Friendly Forwarding use session to store cookies :return_to and the path\nwhere you’re trying to go\n"],["sub_cities_names","City","City.html#method-i-sub_cities_names","()",""],["syncable_users","UsersController","UsersController.html#method-i-syncable_users","()",""],["team","StaticPagesController","StaticPagesController.html#method-i-team","()",""],["to_s","Restaurant","Restaurant.html#method-i-to_s","()",""],["to_s","User","User.html#method-i-to_s","()",""],["unfollow!","User","User.html#method-i-unfollow-21","(other_user)","<p>destroy the relationship\n"],["update","PasswordResetsController","PasswordResetsController.html#method-i-update","()","<p>reset the password\n"],["update","UsersController","UsersController.html#method-i-update","()",""],["variance","Enumerable","Enumerable.html#method-i-variance","()",""],["welcome_email","UserMailer","UserMailer.html#method-i-welcome_email","(user)","<p>send the user a welcome email\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Use this README file to introduce your application and point to useful\nplaces in the API for learning …\n"]]}}